{{ range $index, $deployment := .Values.deployments }}
{{ $ksqlOpts := join " " $deployment.ksqlOpts }}
{{ $projectDir := printf "/etc/ksql/project" }}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ $.Chart.Name }}-{{ $deployment.name }}
    instance: {{ $.Chart.Name }}-{{ $deployment.name }}
  annotations:
    doc: {{ $.Values.docURL }}
    prometheus.io/scrape: "true"
  name: {{ $.Chart.Name }}-{{ $deployment.name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: {{ $deployment.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ $.Chart.Name }}-{{ $deployment.name }}
      instance: {{ $.Chart.Name }}-{{ $deployment.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        doc: {{ $.Values.docURL }}
        prometheus.io/scrape: "true"
        checksum/projectfiles: {{ include (print $.Template.BasePath "/configmap-project-files.yaml") $ | sha256sum }}
      labels:
        app: {{ $.Chart.Name }}-{{ $deployment.name }}
        instance: {{ $.Chart.Name }}-{{ $deployment.name }}
    spec:
      containers:
        - name: ksql
          image: {{ $.Values.image }}
          imagePullPolicy: IfNotPresent
          workingDir: {{ $projectDir }}
          args:
            - ksql-server-start
            - "{{ $projectDir }}/{{ $deployment.ksqlConfig }}"
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          env:
          - name: "KSQL_OPTS"
            value: "{{ $ksqlOpts }}"
          {{ if $deployment.initScript }}
          - name: "INIT_SCRIPT"
            value: "{{ $projectDir }}/{{ $deployment.initScript }}"
          {{ end }}
          volumeMounts:
          - name: project-files-volume
            mountPath: "{{ $projectDir }}"
          resources:
            limits:
              cpu: "{{ $deployment.cpu }}"
              memory: {{ $deployment.memory }}
            requests:
              cpu: "{{ $deployment.cpu }}"
              memory: {{ $deployment.memory }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      volumes:
        - name: project-files-volume
          configMap:
            name: {{ $.Chart.Name }}-{{ $deployment.name }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 600
      tolerations:
      - key: CriticalOnly
        operator: Exists
{{ end }}
